worklog
09/27/2016
Read the wiki/instruction first before action, don't try without thinking 
ssh -X: open the GUI on ur local from the remote. Doesn't work on Mac OS.
Ask for help when your way doen't work -- The trick learned from the other group doesn't work in my current task, it becomes very weired. Then I need to ask for help
Don't promise when u not sure!
When you are not in status, stop working, take a break/nap/sleep, it will be figured out after u come back.
TODO: Learn Spring
ASK: How do we break a big story into small tasks?


09/28/2016
Knowledge: Jmockit weired behavior: all methods in expectation needs to be mocked and strictExpectation needs to follow the order.


09/29/2016
Skills: SSH tunnal --> ssh -L 2009:localhost:2009 dev-dsk-lujiabin-2a-ec1c8fd4.us-west-2.amazon.com
		RCS -- look at the intern wiki

Knowledge: Don't push code on Friday; 
		Learn how to write CM.

TODO: Watch the video of CM

Problem resolved: FreshAutomatedBuyingDataAccess Integration Tests failed: change the FC number in database, but the intergration test doesn't chnage in mainline, only change in another branch, wait for merging into mainline. Before that, ignore this error.

FAB Tools Website Integration Tests failed due to the AAA issue, retry it!

Problem un-resolved: brazil-graph paths-to -d JBossLogging -- jdk1.7 error

09/30

ASK: Why do we need to specify the content root? 
	Maven: Pom.xml  ---> Maven is a builder tool like Brazil
	@AutoWired? ---> It's recongized by the type of @Componment automatically


Knowledge: the string after the package name is the branch name in code.amazon.com

The positions in Game company(Alex told me):
Director:
Producor: 
Developers: Tools programmer(for designers and artists), Graphic programmer, Physics programmer, AI programmer, Animation programmer(These are for Game Engine, like libraries), Game playing programmer(Game Implementation)), System developer, network engineering
Designers: level designer
Arts:
Testers:



Skills: To make IntelliJ recongnize ur code as a peoject, u need to specify content root.

TODO: Read the user guide wiki: https://w.amazon.com/index.php/AmazonFresh/RegionalSupplyChain/Fresh_Automated_Buying_User's_Guide

10/03/2016

Knowledge: SQS --> Message queue
		SNS --> Push Notification
		Cron: a tool in unix letting u arrange your tasks
		IAD --> NA prod
		PDX --> JP prod && NA test
		DUB --> EU --> GB && UK prod
		OOS --> Out of stack

TO ASK: Monitor, operation

10/04/2016

ASK: 

Learn: FMP --> Fresh Merchant Pratform
	Shelf_life: from FC receival to product expiration
	Shelf_pad_life: The time in days we want the customers to have to use.
	The Shelf_time minus Shelf_pad_time would be the max time the product can stay in FC.
	Buying period: the period btw the previous arrival and the next arrival 
	Inventory Owner Group(IOG)

Problem:

TODO: Output a csv file for actual demand and rawForecast for 41 days

10/05/2016

ASK: hubs-spoke  crossdock    
	SSH tunnel? http://blog.trackets.com/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html

Learn: sout + TAB --> System.out.println()
		command + J --> show the short cuts for some common commands
		lead time: The period from the verdor ship the item to the fc received the item
		supercsv library

Problem:

TODO: Output a csv file for actual demand and rawForecast for 41 days

10/06/2016

TODO: read the crossDock wiki

ASK: normal node VS. virtual cross dock node diff?   lead time  
	SSH tunnel? http://blog.trackets.com/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html


10/07
ASK: What if our evaluation result is our method is better than SCOT.

Skills: USe regex to find and replace: Eg: "\s" to find all space, "\t" to find all tabs, they are different
		Field is the place other than local. eg, private final ProducerProxy producerProxy;
		Local: eg, ProducerProxy producerProxy; in a method


TODO: Learn regex

Important and emergency: Spring,

Important:

emergency:

Unimportant and umemerency:

10/09 Friday
DAO: Data access object
ORM: Object-relation mapping. eg: Popular open source ORM products include Doctrine, Hibernate, iBATIS and JPA implementations such as Apache OpenJPA.

ASK: How does usb hub work?
	acceptance test?
	https://github.com/google/guava/wiki/ThrowablesExplained

Knowledge: LAX6 is our first crossdock fc
	Delete word per time: Ctrl + Delete
	acceptance testing is a test conducted to determine if the requirements of a specification or contract are met. Acceptance testing is also known as user acceptance testing (UAT), end-user testing, operational acceptance testing (OAT) or field (acceptance) testing.
	In principle, unchecked exceptions indicate bugs, and checked exceptions indicate problems outside your control. 

TODO: earphone to remove noise

10/10

ASK: why remove from cache?
	Why don't use abstractClass?

Knowledge: IOGL: Inventory Owner Group Location. Consists of an IOG and FC pair.
		IAP: Inventory Availability Pool.
		MM: Marketplace Merchant.
		IOG: Inventory Owner Group

10/13

ASK: Why blue and green in package structure?
 	Why the toDateTimeAtStartOfDay() is 7:00?
 	Effective_shelf_life?
 	LatePO: PO is late than now? PoArrivalTime is the promise time

 Knowledge: caseYield: quantity per case
 			If we don't really need the parameter, we can give them null in unit test

 To learn: Joda time

 TODO: fix .zshrc warning


10/17

Knowledge: The @JsonCreator annotation is useful in situations where the @JsonSetter annotation cannot be used. For instance, immutable objects do not have any setter methods, so they need their initial values injected into the constructor. 

KS: SWF --> rerun, access.amazon.com, check the brief log


10/18

Knowledge: Jackson

TO Learn: Why ObjetMapper doesn't work?


10/19

Skills: Most tests are writed in the beginning, but some of them are added after some bug found that origin test didn't cover.

Knowledge: 3 workflows, 

To Learn: When to throws, when to try/catch? 
		try/catch is used to solve this problem right here and only give a warning message, not let it's caller know;
		While throws is to ignore this problme here and let it's caller know and handle this problem.

10/20

Tips: Update JDK may cause some problems, don't update them especially while u are working on something.
		bbcr will run the unit tests and then bbit to run the intergration test
		checkstyle file

Knowledge: Abstract classes may have abstract methods. Abstract methods are methods without implementations and these must be implemented by your subclass (unless you make your subclass abstract too). Abstract classes cannot be instantiated.

10/21
ASK: WHy remove "? extends"?
	Andres: Horror stories

To Learn: Shell

Learn: Try youself first although it may take much time, don't ask before you try for some time, it's a learning experience
		One code review per day
		Test plan --> source code --> test code
		Read wiki multiple times
		Integration test will cost a long time since it depends on many other tests

10/23
ASK: dev --> mainline automatically? NO
	KINESIS? Amazon Kinesis is a platform for streaming data on AWS, offering powerful services to make it easy to load and analyze streaming data, and also providing the ability for you to build custom streaming data applications for specialized needs. 

Knowledge: 	fluxo --> cut ticket
			Auora --> reporting
			MySql --> fabcore(daily_roq_s3_links, purchase_order_requests, runs), fabric(ISM's configuration)
			IOGL: Inventory Owner Group Location. Consists of an IOG and FC pair.
			IAP: Inventory Availability Pool.
			MM: Marketplace Merchant.
			metrics --> transfer data to figures

Skills: Injectable VS Mocked: https://phoenixjiangnan.github.io/2016/04/06/test/jmockit/Unit-Test-JMockit-What-are-the-differences-between-Mocked-and-Injectable-in-JMockit-and-when-to-use-Injectable-rather-than-Mocked/

		HappyTrails: AAA issues, sync host from my 1-click beta environment
		Ant is extended using Java class, the configuration file is xml; while "Make" is shell based, so it's depended on OS and easy to make sytax error when writing commands.
		Apache Ivy is a dependency manager.

10/24

To Learn: Shell and vim skills

Skills: static nested class:  this [static nested] class does not need an instance of the enclosing class in order to be instantiated itself. 
	Example: 
	public class Test { 
	  class A { } 
	  static class B { }
	  public static void main(String[] args) { 
	    /*will fail - compilation error, you need an instance of Test to instantiate A*/
	    A a = new A(); 
	    /*will compile successfully, not instance of Test is needed to instantiate B */
	    B b = new B(); 
	  }
	}

Knowledge: ExternalClientID --> ChainID --> PO
			Same stuff has the same ASIN, no matter how they aggregated
			ASIN + vendor code, we can get the aggregate level
			Planned PO --> haven't called PO service
			Actual PO --> reserved and submitted
			FAB send PO request(externalID included) to PO service, PO service reply a chain ID immedately and verify the request, if it is valid, send a message to it's SNS. FAB register a SQS on it's SNS and will receive message if PO request if finished.


10/26
To Learn: Database!!!

Skills: git add -i --> interactive adding? How?
 

Knowledge: "big-O" ignores data storage latencies, topology, volume, available memory, and even the computational cost of every CPU instructions involved in a given implementation – instead, it merely counts the number of algorithmic operations! Big-O can be a valuable indication when designing algorithms but the best performing and scaling solution depends on the particular constraints of any specific problem and environment. 
RSC: FOOD:  FabOrderingOrchestrationDirector
	FPOG: Fresh purchase order gateway (validation)
	IOG: Inventory order group: fresh, primeNow ...
	IOGL: FC + IOG
	External_client_ID in (database) is the same as (purchase_request_ID) in (database)


10/27
Skills: If there are serval class that have much in common, we can let other classes extends one of them. We don't have to make 		it abstract.
		Search action or option name in IntelliJ:  command + shift + A
		look recent files you open: command + E
		Go back and forth through the history of visited tabs: command + [, command + ]
		Navigate from the current tab to the next or previous tab: command + shift + [, command + shift + ]
		Copy one line: command + D
		delete one line: command + delete


Problem: We might need to think about what these methods should return, since you won't be using the getReportingData(OutputId) method for all of the crossdock data fetching, but it's not immediately obvious how the data will need to be structured in here for getting what you'll need for inventory types.
		
	InventoryTypeDecider:	PurchaseOrderGroup.java PoInteraction.java FabricConfig
Jokes: Amazon yesterday shipping


10/28
Knowledge: try (MetricsWrapper metrics = MetricsWrapper.get(metricsFactory) is for the our monitor(eg: igragh)

Queston: Do we need to change the FabreportingData to transship?



Skills: Mocked, then you don't get the NullPointer error
		Use "any" to represent the things that u don't care
		shift + alt + left click/mouse middle click drag: multicursor

10/31


11/1
Skills: The value of a final variable can only be set once. The constructor is the only place in the code for a class that you can guarantee this will hold true; the constructor is only ever called once for an object but other methods can be called any number of times.

http://javarevisited.blogspot.in/2014/01/why-default-or-no-argument-constructor-java-class.html
http://www.joelonsoftware.com/articles/GuerrillaInterviewing3.html
http://blog.stackoverflow.com/2016/10/Stack-Overflow-92-Podcast-The-Guerilla-Guide-to-Interviewing/?cb=1

11/2
Skills: You cannot mock your own method, can mock only proxy
		Ser/Des test, test cases: test empty, normal and null.
		Use assert instead of System.out.print() since it's didn't need to look at the output to determine whether it is right


		If you have somewhat of a legacy application, and you're not allowed to change the visibility of your methods, the best way to test private methods is to use reflection.

		Internally we're using helpers to get/set private and private static variables as well as invoke private and private static methods. The following patterns will let you do pretty much anything related to the private methods and fields. Of course you can't change private static final variables through reflection.

		Method method = targetClass.getDeclaredMethod(methodName, argClasses);
		method.setAccessible(true);
		return method.invoke(targetObject, argObjects);

		And for fields:

		Field field = targetClass.getDeclaredField(fieldName);
		field.setAccessible(true);
		field.set(object, value);
		
		Notes:
		1. targetClass.getDeclaredMethod(methodName, argClasses) lets you look into private methods. The same thing applies for  getDeclaredField.
		2. The setAccessible(true) is required to play around with privates.


		Often, developers spend a huge amount of time and effort in writing test cases that ensure the application works as expected. However, it is important to test negative test cases as well. A negative test case is a test case that tests if a system can handle invalid data. For example, consider a simple function which reads an alphanumeric value of length 8, typed by a user. In addition to alphanumeric values, the following negative test cases should be tested:

		User specifies non – alphanumeric values like special characters
		User specifies blank value
		User specifies a value which is larger or smaller than 8 characters
		Similarly, a borderline test case tests if the system works well for extreme values. For example, if a user is expected to enter a numeric value from 1 to 100, 1 and 100 are the borderline values and it is very important to test the system for these values.


ToLearn: reflection, best practice of what you want to learn


11/3

To Learn: Stub, Mock and Spy
			Java doc
			Logger
			Threading

Skills: shift + F6 to refactor(rename)
		command + p: hint for method signature

		When you copy stuff from other files, it may copy it's package and class info. Eg: I coped a Logger from another class, it automatically copy the "import static com.amazon.fresh.fab.common.proxy.interfaces.RtipProxy.LOGGER;" from the original class, while I am intending to create my own Logger.

		format your common variables for a test better so that when someone else comes back to this test later, they don't have to puzzle out what is going on. For example, all of the constants here should be private static final variables with capitalized names with underscores: VENDOR_CODE, ASIN, etc.

		avoid using LocalDate.now() in these types of tests, especially if there's timezones involved. You can pick a date that represents your "start" for the test. I tend to use something easy to remember and do math on, like new LocalDate(2016, 1, 1).

		You should also try to group constants together logically with newlines between groups

		Unit test doesn't mean that you can assume the method is only execute once.

11/4
TODO: Sort out the work log

Question: Why do we want to pull the call to the database out of the method?
			@RunWith(Parameterized.class) @Parameters(name = "{index}: fib({0})={1}")
			Is it a good practice to define order for test?

Skills: pull the call to datebase out of the normal method.
		Assert(expectedValue, actualValue): The expectedValue comes first
		http://junit.org/junit4/(
		Assertions
		Test Runners
		Aggregating tests in Suites
		Test Execution Order
		Exception Testing
		Matchers and assertThat
		Ignoring Tests
		Timeout for Tests
		Parameterized Tests
		Assumptions with Assume
		Rules
		Theories
		Test Fixtures
		Categories
		Use with Maven
		Multithreaded code and Concurrency
		Java contract test helpers
		Continuous Testing
		)

		JUnit provides overloaded assertion methods for all primitive types and Objects and arrays (of primitives or Objects). The parameter order is expected value followed by actual value. Optionally the first parameter can be a String message that is output on failure. There is a slightly different assertion, assertThat that has parameters of the optional failure message, the actual value, and a Matcher object. Note that expected and actual are reversed compared to the other assert methods.

		Exception testing(https://github.com/junit-team/junit4/wiki/Exception-testing)

		The @Test annotation has an optional parameter "expected" that takes as values subclasses of Throwable. 
		@Test(expected = IndexOutOfBoundsException.class) 
		public void empty() { 
		     new ArrayList<Object>().get(0); 
		}

		When to use fail in unit test?
		mark a test that is incomplete, so it fails and warns you until you can finish it
		making sure an exception is thrown:

		@Test
		public void testExceptionMessage() {
		    try {
		        new ArrayList<Object>().get(0);
		        fail("Expected an IndexOutOfBoundsException to be thrown");
		    } catch (IndexOutOfBoundsException anIndexOutOfBoundsException) {
		        assertThat(anIndexOutOfBoundsException.getMessage(), is("Index: 0, Size: 0"));
		    }
		}

		prefer asserThat than assetEqual ...

		The default JUnit runner treats tests with failing assumptions as ignored. 

		Execute order: 
		@BeforeClass setUpClass
		@Before setUp
		@Test test2()
		@After tearDown
		@Before setUp
		@Test test1()
		@After tearDown
		@AfterClass tearDownClass

Learning: If you really need to learn something, learn it throughly, otherwise you need to come back and learn it again from beginning
		If the task needs more than one week to implement, call a design review meeting, even a simple one.

Knowledge: RTIP is the Real-Time Item Processor. RTIP is the pipeline that reconciles, validates and normalizes Retail catalog data. It's the process that uses multiple vendor feeds to assemble Amazon’s retail view of an item.


11/5
Skills: we can use slowTest and fastTest to separate different test to save some time when running fast test.

		Dependency Inversion: 
		High level modules should not depend upon low-level modules. Both should depend upon abstractions.
		Abstractions should never depend upon details. Details should depend upon abstractions.

		Open/Closed:
		It means that you should put new code in new classes/modules. Existing code should be modified only for bug fixing. New classes can reuse existing code via inheritance.Open/closed principle is intended to mitigate risk when introducing new functionality. Since you don't modify existing code you can be assured that it wouldn't be broken. It reduce maintenance cost and increase product stability.

		You don't add testability by adding tests. You add testability by using SOLID design.

		The test class above shows something unusual: the second test method declares a parameter! Normally, JUnit/TestNG test methods are not allowed to have parameters. When using JMockit, however, such mock parameters are allowed. In general, it's best to use mock fields of the test class only when the mocked types are needed by most or all tests in the class. Otherwise, mock parameters with scope limited to a single test are preferred. JMockit will always take care of instantiating the mocked type and either assigning the instance to the mock field (provided the field is not final) or passing it as an argument when the test method is invoked by the test runner.


11/6
Question: Do we prefer to use dummy or matcher? NO, we don't prefer to use matcher since it's not strong

SKills: The best way to test multithreads code is to reduce the complexity of threaded code as much as possible. Minimize areas where threads interact, test as best as possible, and use code analysis to identify danger areas. 
http://stackoverflow.com/questions/12159/how-should-i-unit-test-threaded-code

	expectation also can be a separate method
	Matcher: assertThat(result, either(is(1)).or(is(2))); 
			assertThat(result, isOneOf(1, 2, 3))
			assertThat(result, isIn(theCollection))
			assertThat(result, anyOf(equalTo(1), equalTo(2), equalTo(3)))

		Type migration: Alt + enter

11/7
Lessons: "git revert" will automatically make another commit with the old verison code
		Use "git revert -n" to revert to old version and keep the file changes
		Don't use "git rebase" when you are not sure you are all set, it will destroy the history and maybe be very hard to recover
		USe "git pull rebase" to pull the changes from remote


11/8
Skills: The only time fields on test classes should be static is when they're static and final (constants like you've got above here). Otherwise, they should be fields if they are used in multiple tests or set as parameters for @Parameterized tests. Otherwise, everything should be method local so we don't run into weirdness where tests fail because they run in a different order than we expected. --zev

git - pushing specific commit: git push <remotename> <commit SHA>:<remotebranchname>


Question: IAAF isCrossDockNormal() optional? IntelliJ is confused by the chain operation.
			AutoComplete without appending --> Tab

			
Skills:	Deencapsulation.getField() reflection to get private field
		When remove a package, close ninja-sync first, don't let ninja-sync help, or you will have problem in delete package in cloud
		--no-review-guess to generate new cr

11/9
Skills: If you use some tech you don't familiar, please sure to check the doc and examples
		When puting code into a class, think whhether it is the best place to put it 
		Work on subtasks separately, create a local branch after finish a task!!! That works fantastic!

		Trace - Only when I would be "tracing" the code and trying to find one part of a function specifically.
		Debug - Information that is diagnostically helpful to people more than just developers (IT, sysadmins, etc.).
		Info - Generally useful information to log (service start/stop, configuration assumptions, etc). Info I want to always have available but usually don't care about under normal circumstances. This is my out-of-the-box config level.
		Warn - Anything that can potentially cause application oddities, but for which I am automatically recovering. (Such as switching from a primary to backup server, retrying an operation, missing secondary data, etc.)
		Error - Any error which is fatal to the operation, but not the service or application (can't open a required file, missing data, etc.). These errors will force user (administrator, or direct user) intervention. These are usually reserved (in my apps) for incorrect connection strings, missing services, etc.
		Fatal - Any error that is forcing a shutdown of the service or application to prevent data loss (or further data loss). I reserve these only for the most heinous errors and situations where there is guaranteed to have been data corruption or loss.

		git tag -d tagName: to delete a tag
		dryrun: brazil ws --dryrun -p pkg1 -p pkg2: this will upload your local code to build.amazon.com to start a dryrun
		Use git pull --rebase
		git push origin dev
cr: A factory should not have to be recreated for each object it creates, and it should generally be stateless.


11/10
Question: @Autowired, what if it has a new method?
			Will resolve conflict have problem on something since different versions have different api?

11/11
Skills: Never use rebase on public branch
		After finish a task and push that branch, delete that branch because you no longer need it
		Ww can use @Parameter and switch/case to write test in a clear way
		We can make testcase such as "BeforeClass" and "AfterCLass" a class, so we can reuse it in other classes

		Git merge local change to dev:
		git checkout dev
		git merge --no-ff myFeature
		The --no-ff flag causes the merge to always create a new commit object, even if the merge could be performed with a fast-forward. This avoids losing information about the historical existence of a feature branch and groups together all commits that together added the feature.

		http://nvie.com/posts/a-successful-git-branching-model/

		git log -g: can see all the local log info including the ones you already rebased

		Logger.error/warn/info... doesn't have the String format built in, you need to write it explictly. eg:  LOGGER.error(String.format("Failed to retrieve run record from fabcore database with outputId: %s",outputId)); 

		Whenever I pull, under most circumstances I git pull --rebase. This is because I like to see a linear history (my commit came after all commits that were pushed before it, instead of being developed in parallel). It makes history visualization much simpler and git bisect easier to see and understand.


		A specific circumstance in which you should avoid using git pull --rebase is if you merged since your last push. You might want to git fetch; git rebase -p @{u} (and check to make sure the merge was recreated properly) or do a normal merge in that circumstance.
		Another specific circumstance is if you are pulling from a non-authoritative repository which is not fully up to date with respect to your authoritative upstream. A rebase in this circumstance could cause the published history to be rewritten, which would be bad.

		
11/14
 Knowledge: Wall-time: it is the difference between the time at which a task finishes and the time at which the task started.
 Skills: Name: private Long transshipDelta; /* time between hub arrival and spoke arrival in millis */
 		Should be named as "transshipDeltaMillis"


 11/15
 Question: https://cr.amazon.com/r/6209781/ generic
 Skills: Ctrl + Tab to switch tabs

 11/16
 TODO: Copy link and their name from Sprint to wiki for sprint report

Knowledge: Carnaval is the overall(aggregate) alarm, which can cut ticket; cloudWatch is the aws alarm, we can connect cloudWatch and Carnaval by adding field in     Carnaval; But Carnaval is hard to config, so we have ZIOps to help us config the alarm system.

TOASK: What does the operation metric say?

11/17
Knowledge: Sometimes the number key on the keyboard are not recongnized correctly.

Skills: CREATE INDEX for things you want to query in a large table. If you don't need to query it, don't create it.
		eg: CREATE INDEX `i_crossdock_actual_po_spoke_fc_id` ON `fab_reporting`.`crossdock_actual_po_requests` (`spoke_handoff_date` DESC, `spoke_fc_id` ASC, `spoke_iog` ASC, `source_asin` ASC);
		If you want to query `spoke_handoff_date` and `spoke_fc_id`, you don't nned to create a new one. You already got it.
		But if you want to query `spoke_iog` and `source_asin`, you need a new query.


11/18
Skills: Shift + Command + { }: switch tabs in Terminal

Question: Open/Closed?

Knowledge: 
		There are three components to good software: design, performance, and documentation. Software that's well-designed, performs acceptably, and well-documented, is good software. 

		Brazil's package is different from java's package

2016-11-20
Skills: Shortcut for Outlook: Command + 1,2,3,4 --> mail, calendar, contacts, tasks
							Command + j --> Forward a mail
							Command + n --> compose a new mail
		shortcut for chrome: command + d ---> bookmark this page
							home, end to scroll to head or end of a page
							command + 1, 2, 3...


		Use spotlight to launch apps
		Command + l --> focus and select web browser's address bar
		command + shift + -> or <- : select the whole line
		shift + -> or <- : select char by char
		alt/option + -> or <- : move cursor word by word(also works in terminal, awesome!)
		ctrl/option/alt + backspace: remove word by word
		shift + option/alt: select the whole word 
		shift + home : select from current to beginning
		shift + end : select from current to end 

		If you need to make a interface from an exist class, you can use "extract class"


Knowledge: Aspect: PointCut, aspect and advisor
			wildcard: * *.*(..) this first one is return type, the second is the class name, the third is the method name, the forth is the args type

			instanceOf ClassName/InterfaceName

2016-11-21
Skills: Insert date: command +d, command +d
		Open a duplicate tab: command + L to focus on the address bar and then alt + enter to open a new duplicate one in new tab

Knowledge: Grooming: MessgaeProcessor
			RedShift other database do?
			AAA metrics and coral metrics

2016-11-22
ASK: Why watch gamma to see the error/fatal/warning?

Knowledge: AWS service: NA --> US.East
			EU --> EU.West-1
			JP --> US.West-2

2016-11-23
Knowledge: Story points and task points are like the weight and height of an elephant, it's relavant but not necessary same


2016-11-28
Knowledge: If the code you didn't checked out is pushed but failed on pipeline due to other changes, even if you got the latest versionset and code, it will not compile or failed since the versionset didn't have the code change. If you checked out this package in local, you can got the latest code change and thus succeed in local.



2016-11-29

TODO: look at the RscRetryWrapper ---> Look at the RegionalSupplyChainPrimitives package ---> from lower to higher level package

Skills: There is a File Type in IntelliJ which you can choose which file type to ignore and which to recongnize. If you put a file type in ignore field, it will not be recognized by IntelliJ, thus the import that kind of file will not be resolved.

Knowledge: Threadpool
		 Stack --US EU JP FE(Far East)
		 Spike
		 dynamic config

		 FAB's three services: gathering computing orchstrictor

2016-11-30

Skills: Controller should be thin and do nothing actual job, it's just a controller or manager.

		Multithread is hard to test and thus we should avoid test multithread as we can. We can break the multithread part into a single class and test it in single thread.

		Hot swap failed in IntelliJ: You are attempting to change your source code while the program (or IntelliJ's debugger) is still running. 
		Lamda expression will create an anonymous class, which is hard to test

		This keyword in Builder class means builder itself

		Ctrl + Command + F to toggle full screen model

2016-12-02
TOASK: signal
Skills: Use @ignore to ignore the test you don't need to run, especially in integration test which is time consuming. But remember to remove it afterwards.


2016-12-04
Skills: Blue-green deployment is a release technique that reduces downtime and risk by running two identical production environments called Blue and Green. At any time, only one of the environments is live, with the live environment serving all production traffic. For this example, Blue is currently live and Green is idle. (https://docs.cloudfoundry.org/devguide/deploy-apps/blue-green.html)

		If there are two and maybe more cases in the futrue, we can use switch/case statement to control the flow. Remember to add "break" after each case! If there are two cases and they have some common code, don't save these code to put them togetherm instead make it clear that each peration in each case.

TOASK: https://docs.cloudfoundry.org/devguide/deploy-apps/blue-green.html (datebase, why not directly unmap blue, how do customers deal with subdomain)

ToLearn: What is FcID? Is same as fcExternalId, maybe some of them are migrated and removed.
		Remote Debug
		Annotation
		Database schema
		lamda expression


Knowledge: https://www.linkedin.com/pulse/amazonians-response-inside-amazon-wrestling-big-ideas-nick-ciubotariu
		FetchType.lazy and FetchType.eager: http://stackoverflow.com/questions/2990799/difference-between-fetchtype-lazy-and-eager-in-java-persistence-api


ONCALL: Correspondence, work Log, root cause and resolution
		Route ticket to
		If a ticket is put into researching area for more than 90 minutes, it will escalation to your manager. But if you put into pending stage, it will not.

		Tips:
		Focus on addressing the customer impact first
		check the obvious -- look at yur metrics
		determine what has recently changed
		Don't make more than one major change at a time
		Document any changes you've made
		Be prepared to rollback
		Search for resolved tickets with the same issue/CTI
		check if there has been a recent ccode deployment
		consider trying an active, bounce, or rollback
		keep calm and reach for help

		When oncall:
		Your first priority is to handle high severity events. Put the fire out.
		Your second priority is to protect the productivity of your team. As the oncall it is your duty to protect your team from being pulled off of their work into operational issues. You do this by owning the team's operations and proactively jumping on emails, escalations, and any questions that may distract them. Your co-workers will thank you for this, and will hopefully return the favor when you return to project work (and they're oncall!)

		Shadowing ideally last about 2 weeks and looks something like this:
		During the first week you shadow the primary, handling low severity tickets during the day and reviewing any high severity tickets with the primary after they have resolved the issue.
		Next, beginning on a Friday, any time a high severity ticket comes in, the primary pages you in -- at the time the ticket happens -- day or night. During this phase, you work the ticket with coaching from the Primary.
		At the end of the weekend, on Monday, your roles reverse. You become the primary with a secondary to back you up. During this phase you have the option to page in the secondary but only when you need it. You both then debrief on any high severity tickets the morning after they occur.
		The next time you go oncall, your team can decide to give you a secondary backup or you can fly solo.

		Important note about Autocuts
		Autocut tickets will de-dupe (that is to say "not cut another ticket") as long as the ticket is left open -- even in another queue. So it is not a good idea to reassign them or leave them open. Many teams will close the ticket, as soon as a monitor is out of alarm, open a Root Cause Action Ticket and relate the Autocut ticket to it. On a related note, it's not a good idea to 'Pending Requester info' (to avoid the escalation feature). You might miss an alarm.
		Additionally, if someone reassigns an Autocut ticket to you, don't reject it or forward it to another group. Close it and link a new ticket to the original Autocut -- at the same severity -- then work it or re-assign it to the new group.

		Tickets have two separate diary entry types:
		Entries put into the Correspondence field are emailed out to all individuals on the Cc: list
		Worklog entries are not.

		Update early, update often


Tips for CM: The title should be abstract and should not include technical details.
			When things went wrong, repsonse should be "Rollback and fix it"

TODO: trigger a notification when build finished


2016-12-07
TODO: One more task in FabTools for datetime change
	Do we need to change everything related to date to dateTime? Including warehouseQuantities, PoQuantities and plannedPoQuantities, PoAvailability?
Skills: Dry-run before you push(brazil ws dry-run)



2016-12-12

Learn: Cannot resolve "import org.apache.catalina.connector.ClientAbortException;" due to IntelliJ cannot recognize ?? (https://code.amazon.com/packages/FABToolsWebsiteContent/commits/9d8c938013fe9ad23cfda6529fdf31a9ee0fe585#)

2016-12-13
Learn: Coral service can generate some code for you, so some code cannot be resolved until do a "brazil-build generate" and mark the generated-src as src. The way to generate the code is defined in the model.xml.

Coral is generated by Hex.

The command to deactive FABToolsWebsite apollo env: sudo /apollo/bin/runCommand -e FABToolsWebsite -a Deactivate
The command to active FABToolsWebsite AAA: sudo /apollo/bin/runCommand -e FABToolsWebsite.CONSUMES.AAASecurityDaemon -a Activate

REMOTE DEBUG: FABTools port 5050
				FabService port 5050: Use coral diver to trigger the breakpoint

			If your apollo env is active, when you run your dev, it actually runs on apollo; If you deactive it, it will then run on your dev desktop.

Don't necessary to get everything done, finish the important first!
Skills: F2 to go to the next/previous error

2016-12-14
Skills:

By default, running git stash will stash:
* changes that have been added to your index (staged changes)
* changes made to files that are currently tracked by Git (unstaged changes)
But it will not stash:
* new files in your working copy that have not yet been staged
* files that have been ignored

git stash save {message}

git stash -u : also stash  untracked files(not added new files)
git stash -a: also stash ignored files
git stash -p: partial stash
git stash drop stash@{1}: clean up your stash
git stash clear: delete all of your stashes


Vim:
a	Append text after the cursor [count] times.
A	Append text at the end of the line [count] times.
i	Insert text before the cursor [count] times.
I	Insert text before the first non-blank in the line [count] times.
o	Begin a new line below the cursor and insert text, repeat [count] times.
O	Begin a new line above the cursor and insert text, repeat [count] times.
u   undo
ctrl + r: redo
0   jumps to the beginning of the line
$   jumps to the end of the line
^   jumps to the first non-blank
g_ → go to the last non-blank character of line
H/M/L  jump directly to the high/middle/low of the screen
G   jumps to the end of the file or the line# typed before it
NG → Go to line N
gg → shortcut for 1G - go to the start of the file
Use w,b,e to move along "words".
* (resp. #) : go to next (resp. previous) occurrence of the word under the cursor
Use R to enter insert mode with an overstrike cursor, which types over existing characters
f   followed by another key, moves the cursor to the next instance of that character on the current line.
F   Do backwards as f
t/T Do the same as f/F, but stop right before the character
w   Next word
d   delete, followed, by any motion deletes the text between the cursor and that motion's destination(eg.: dw df_)
c   change, does the same as d, but leaves you in insert mode
p   paste
y   followed by any motion to copy(yy copy the current line)
text deleted by d,c,x is also copied
/   search 
?   search backwards
n   repeats the last search in the same direction and N do backwards
Be careful that this search target is interpeted as regular expression: a*b means zero or more 'a's followed by a 'b'; ^abc means 'abc' at the beginning of a line;
[0-9] looks for the next digit
%   jump between matching pairs of '(', ')', '[', ']'
-/+ jump to the previous/next file
r   followed by any character replaces the current character with that one
J   joins the current line with the next one 
cw → replace from the cursor to the end of the word
:e <path/to/file> → open
:saveas <path/to/file> → save to <path/to/file>
N<command> → will repeat the command N times.

Remember about the importance of vi moves? Here is the reason. Most commands can be used using the following general format:
<start position><command><end position>
For example : 0y$ means
0 → go to the beginning of this line
y → yank from here
$ → up to the end of this line




k 上
j  下
h  左
l  右

(	[count] sentences backward
)	[count] sentences forward
{	[count] paragraphs backward
}	[count] paragraphs forward

.: repeat the last command
%: The '%' motion moves from a parenthesis (or similar grouping character) to its matching one 



DateTime/Date/Instant
        System.out.println(new DateTime(2016, 12, 13, 2, 5, 5).toDate().toInstant());
        System.out.println(new DateTime(2016, 12, 13, 2, 5, 5).toDate());
        System.out.println(new DateTime(2016, 12, 13, 2, 5, 5, DateTimeZone.forID("America/Los_Angeles")));

        2016-12-13T02:05:05Z
		Tue Dec 13 02:05:05 UTC 2016
		2016-12-13T02:05:05.000-08:00

SKills: Alt + Command + left/right to navigate btw previous view positions

2016-12-15
Skills:  Vim:  'f' followed by any other character to find its next occurrence, '%' to use matching parens to go where you want to go, etc... When navigating the file, you have motions to go to the top/middle/bottom of the screen directly, '/' which is effortless to type to search for a string, ']]' and the likes to navigate by functions, etc. 'H', 'M' and 'L' take the cursor directly to the 'H'ighest, 'M'iddle, or 'L'ower line on the screen. 

Terminal: 

Using the clipboard: pbcopy copies what is given to it by stdin into the clipboard. pbpaste pastes what is in the clipboard to stdout.
You can open the curent directory in Finder by typing open .. In fact, you can open a file the same way opening it in finder would work by typing open <filename>.
Use opensnoop to see which files are being modified live. You can narrow it down to a process or a particular file, by using the -p or -f arguments, respectively.
Make the computer speak (literally) by typing say <sentence>. This comes in handy for keeping track of what your shell script is doing while you are away from the computer.
Assuming you have set vi mode for bash, hit Escape+v to edit the current command line you are writing in vim. Very useful if you are working on a long command.


Remote login my work mac: ssh lujiabin@9801a790b6f1.sea.amazon.com

Do another thing after some thing is done"
Generally, if you know this before running the command, you can just start it with:
command; command-after &
This will execute the command-after after the previous command has exited (regardless of its exit code). The & will start it in background.
If you care about a successful or failure exit, respectively use:
command && command-after-only-if-success &
command || command-after-only-if-fail &


Leadership: Where possible the users shouldn’t be the ones noticing an issue first.


English: potluck --> a meal or party to which each of the guests contributes a dish.


2016-12-16
Three Advantages: Deliver results, Think Big, Learn and be Curious
Three not understand well: Bias for Action, Are Right, A Lot, Ownership

Permission: odin credential, apollo, aws account, AAA

T-shirt sizing?

NA:  UNJ1 UWI1 UNC1 UPA1 HWA2 UIL2 UFL2(N) 


EU: HUK2 UED1 (N)


2016-12-19
SQL: 
Comments: -- single line; /*  */ multiple lines
LIKE: SELECT * FROM Customers WHERE City LIKE 's%';
Wildcard: 
Wildcard	Description
%			A substitute for zero or more characters
_			A substitute for a single character
[charlist]	Sets and ranges of characters to match
[^charlist]
or          Matches only a character NOT specified within the brackets
[!charlist]

The IN operator allows you to specify multiple values in a WHERE clause.
The BETWEEN operator selects values within a range. The values can be numbers, text, or dates

SQL aliases are used to give a database table, or a column in a table, a temporary name.
Basically aliases are created to make column names more readable.

INNER JOIN: Returns all rows when there is at least one match in BOTH tables
LEFT JOIN: Return all rows from the left table, and the matched rows from the right table
RIGHT JOIN: Return all rows from the right table, and the matched rows from the left table
FULL JOIN: Return all rows when there is a match in ONE of the tables

The UNION operator is used to combine the result-set of two or more SELECT statements. UNION selects only distinct values. Use UNION ALL to also select duplicate values!

The SELECT INTO statement selects data from one table and inserts it into a new table.

The INSERT INTO SELECT statement selects data from one table and inserts it into an existing table. Any existing rows in the target table are unaffected.

 In SQL, we have the following constraints:

NOT NULL - Indicates that a column cannot store NULL value
UNIQUE - Ensures that each row for a column must have a unique value
PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Ensures that a column (or combination of two or more columns) have a unique identity which helps to find a particular record in a table more easily and quickly
FOREIGN KEY - Ensure the referential integrity of the data in one table to match values in another table
CHECK - Ensures that the value in a column meets a specific condition
DEFAULT - Specifies a default value for a column

Indexes allow the database application to find data fast; without reading the whole table.
The users cannot see the indexes, they are just used to speed up searches/queries.
Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So you should only create indexes on columns (and tables) that will be frequently searched against.


Aurora: MySQL(RDBMS)
Redshift: postgresql (ORDBMS)


2016-12-20
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'aws.rsc.async.topicArn' in string value "${aws.rsc.async.topicArn}"

CR: The better user experience would be to  actually fix the date picker to not error on a mm/d/yyyy format.  8/12/17 will return an empty date too.  Will the date picker support a m/d/yyyy format?

2016-12-21
FOOD KinisisConsumer --> TodWorker
To setup SWF Flow-Framework in IntelliJ you should first understand additional things that happen during build. There are 2 main things:
Flow Framework uses java Annotation Processor Tools (aka APT, details: http://docs.oracle.com/javase/7/docs/technotes/guides/apt/) to generate java clients for activities and workflows.
AspectJ is used to weave the code executed by workflow. More exactly it weaves the @Asynchronous and @ExponentialRetry annotations.

Annotation Processing Tool (apt): The apt tool first runs annotation processors that can produce new source code and other files. Next, apt can cause compilation of both original and generated source files, thus easing the development cycle.

SOP: Standard Operation Procedure

"baking" (leaving a build in Devo for a while to see what happens)

RediFork solves a problem that many teams have in regards to moving towards full Continuous Deployment: manual bake time. 

2016-12-22
1. Attend office hour is much more efficient than looking at wiki ourselves























